package main

import (
	"log"
	"sync"
	"time"
)

func main() {
	/**
	METHOD 1
	2023/08/01 13:45:02 Total sum of square 5
	2023/08/01 13:45:02 Thời gian xử lý 1 ::: 0s
	*/
	startTime := time.Now()
	randomNumbers1 := []int{}
	for i := 1; i <= 5; i++ {
		randomNumbers1 = append(randomNumbers1, i)

	}
	sum1 := 0
	for i := 0; i < len(randomNumbers1); i++ {
		sum1 += randomNumbers1[i] * randomNumbers1[i]
	}
	log.Printf("Total sum of square %d", sum1)
	endTime := time.Since(startTime)
	log.Printf("Thời gian xử lý 1 ::: %s\n", endTime)
	/**
	METHOD 2
	*/

	startTime2 := time.Now()
	randomNumbers := []int{}
	for i := 1; i <= 5; i++ {
		randomNumbers = append(randomNumbers, i)

	}

	c1 := generateNumbers(randomNumbers)
	c2 := generateNumbers(randomNumbers)

	// Fan-out: Xử lý dữ liệu từ channel đầu vào và trả về kết quả qua channel mới
	c1 = square(c1)
	c2 = square(c2)

	// Fan-in: Kết hợp kết quả từ nhiều channel vào một channel duy nhất
	result := merge(c1, c2)

	// In kết quả từ channel kết quả
	sum := 0
	for val := range result {
		sum += val
	}

	log.Println("Total sum of square:", sum)
	endTime2 := time.Since(startTime2)

	log.Printf("Thời gian xử lý 2 ::: %s\n", endTime2)
}

// Fan-out: Chia nhỏ dữ liệu vào các channel
func generateNumbers(nums []int) <-chan int {
	out := make(chan int)
	go func() {
		defer close(out)
		for _, num := range nums {
			out <- num
		}
	}()
	return out
}

// Fan-out: Xử lý dữ liệu từ channel đầu vào và trả về kết quả qua channel mới
func square(in <-chan int) <-chan int {
	out := make(chan int)
	go func() {
		defer close(out)
		for num := range in {
			out <- num * num
		}
	}()
	return out
}

// Fan-in: Kết hợp kết quả từ nhiều channel vào một channel duy nhất
func merge(cs ...<-chan int) <-chan int {
	var wg sync.WaitGroup
	out := make(chan int)

	wg.Add(len(cs))
	for _, c := range cs {
		go func(ch <-chan int) {
			defer wg.Done()
			for n := range ch {
				out <- n
			}
		}(c)
	}

	go func() {
		wg.Wait()
		close(out)
	}()

	return out
}
